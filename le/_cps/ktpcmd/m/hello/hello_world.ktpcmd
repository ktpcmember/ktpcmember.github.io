<meta>
title += "Hello World! - C++ on MSVC講習"
keywords += ",C++,MSVC,Hello,World"
description = "C++コンソールプログラムでのHello, world!について解説しています。"
</meta>

<header>
name = "C++ on MSVC講習"
top = "le\_cps\_cps.html"
index = "le\_cps\m\i_dx\i_dx.html"
before = ""
next = ""
</header>

<main>
# C++ on MSVC講習/Hello World!

## 概要
初めてのC++プログラムは、`Hello World!`のような文章を表示するのが慣習です。
今回は、`Hello World!`と表示するプログラムを作りましょう。

*- 重要語
- コード プログラマーが書く文章
- ビルド {Visual Studioでの実行ファイルへの変換}
*+ 必要語

## C++のプログラム事始め
まず、C++のプログラムを学んでいくにあたって、プログラムの仕組みについて説明します。

### コード、プログラムの実行とビルド
C++ではプログラマーが書いている文章のことを**コード**だとか、**ソースコード**と言います。
コードは幾つかの手順を踏んでPCが実行できるファイルに変換してから使用します。
Visual Studioでは実行ファイルへ変換する一連の動作を**ビルド**と呼んでいます。
ビルドは**`Ctrl+B`**、ビルドと実行（デバッグ無しで実行）は**`Ctrl+F5`**がショートカットです。

### コンパイルとコンパイラ
ビルド中には、コードを機械語に翻訳する作業があり、これを**コンパイル**と呼びます。
コンパイルをする時は専用のプログラムが使われますが、それを**コンパイラ**と言います。
私達はMicrosoft社のMicrosoft Visual C++（**VC++**や**MSVC**とも）を使います。

### 処理系
処理系は、コードの機械語への翻訳と実行をする一連の仕組みの事です。
即ち、ビルドと実行をする一連の仕組みで、多くの場合はコンパイラとOSの組み合わせとなります。
ですが、処理系や実装という言葉は、コンパイラを指す言葉として使われることもあります。
C++では、処理系によって処理が異なる場合が多数あり、そのためこの言葉は多く使われます。

### コンソール
これから私達が学ぶC++プログラムは、原則としていわゆる**コンソール**を使用します。
ここでの**コンソール**は、**文字のみ**でやり取りをする[CUI](Character User Interface)形式の画面の事です。
一方、普段から私達が使っているプログラムのほとんどは[GUI](Graphical User Interface)形式の画面です。

## `Hello World!`のコード
さて、Visual Studioを開いて、Visual Studioのプロジェクトの初期コードを実行します。
**新しいプロジェクトの作成>コンソール アプリ**で新しいプロジェクトを作り、実行しましょう。
以後も同様に**コンソール アプリ**を選択してプロジェクトを作るので、覚えておいてください。

```cpp Hello, World!
// example.cpp : このファイルには 'main' 関数が含まれています。プログラム実行の開始と終了がそこで行われます。
//

#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

// プログラムの実行: Ctrl + F5 または [デバッグ] > [デバッグなしで開始] メニュー
// プログラムのデバッグ: F5 または [デバッグ] > [デバッグの開始] メニュー

// 作業を開始するためのヒント: 
//   1. ソリューション エクスプローラー ウィンドウを使用してファイルを追加/管理します 
//   2. チーム エクスプローラー ウィンドウを使用してソース管理に接続します
//   3. 出力ウィンドウを使用して、ビルド出力とその他のメッセージを表示します
//   4. エラー一覧ウィンドウを使用してエラーを表示します
//   5. [プロジェクト] > [新しい項目の追加] と移動して新しいコード ファイルを作成するか、[プロジェクト] > [既存の項目の追加] と移動して既存のコード ファイルをプロジェクトに追加します
//   6. 後ほどこのプロジェクトを再び開く場合、[ファイル] > [開く] > [プロジェクト] と移動して .sln ファイルを選択します

```

### 実行結果
コンソールが出てきて、`Hello World!`と改行（気付きにくいですが）が表示されます。
下にVisual Studioからの終了メッセージが表示されますが、無視していきましょう。
出力については、`> Hello World!`のように、**`> `を付けて記載**していきます。

```cmd 実行結果
> Hello World!
> 
```

## コード`Hello World!`解説
それでは、まず上の方からコードを見ていきましょう。

### コードで使える文字
さて、C++の文法について触れていきますが、初めにコードで使える文字についてです。
実は、「必ずコードで使用できる文字」の集合がC++では定義されています。
その集合は、基本ソース文字集合などと呼ばれていて、以下に挙げる96文字です。
ただ、後述する文字/文字列リテラルなどでは、その他の文字も使える事があります。
ちなみに、MSVCでは拡張機能として、`$`も基本ソース文字集合として定義されています。

```syntax 基本ソース文字集合（確実にコードで使用できる文字）
`A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`
`a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
`0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
`_` `{` `}` `[` `]` `#` `(` `)` `<` `>` `%` `:` `;` `.` `?` `*` `+` `-` `/` `^` `&` `|` `~` `!` `=` `,` `\` `"` `'`
スペース 水平タブ 垂直タブ 改行 改ページ 
```

### 基本ソース文字集合と踏みやすいエラー
ありがちなミスとして、「**スペースを全角**にしてしまってビルドに失敗する」があります。
先述通り、コード中で必ず使える文字は96文字で、それ以外だとエラーになる可能性があります。
なので、**全角文字など**が紛れ込んでいると、ほとんどの処理系でビルドが**失敗**するのです。

### コメント
まず、Visual Studioのエディターで緑で表示されている部分は全て**コメント**です。
コメントはコンパイルする時に削除され、**実行ファイルには影響しません**。
つまり、**無視してもいい**所です。コードの意図や補足を書く時などで使います。
構文は、`//から改行まで`と、`/*から*/まで`があり、後者は改行をコメントに含められます。

```syntax コメントの文法
`//` 改行以外の任意の文字 改行
`/*` 任意の文字 `*/`
```

### `#[include](インクルード) <[iostream](アイオーストリーム)>`
この一行は、大雑把に言うと、**C++標準ライブラリの`iostream`**を読み込みます。
今は、後で出てくる**`std::[cout](シーアウト)`を使うために必要だから書く**、という認識をしてください。
この一行は次に出てくる、**[main](メイン)関数の前に書く**必要があるので注意してください。

### [main](メイン)関数
コードの`int main() {}`の部分のことを**main関数**と呼びます。
数学でも関数という概念が存在しますが、ひとまず、「動作のまとまり」と捉えてください。
main関数は**プログラム全体のまとまり**で、main関数に書いた内容が実行されるのです。
関数の**本体は`{}`の中**で、まずは基本的に**main関数の本体だけ**にコードを書いていきます。

## コード`Hello World!` main関数内解説
それでは、main関数内の`std::cout << "Hello World!\n";`について見ていきましょう。
ですが、もう少し追加で基礎的なC++のコードの構成のされ方を踏まえておきましょう。

### 式と演算子、オペランド
C++では式は、演算子とオペランドの並びのことです。
演算子は言わずと知れた`+`や`-`などから、`new`や`delete`などまで様々あります。
一方、オペランドはリテラルや、追々説明する変数など、何らか「値」のことを指します。

### 文と式
C++には式と文とがあり、コードは**主に文が並べられることで構成**されています。
式の構文の一つに、算数や数学のような**`値`と`演算子`の繰り返し**があります。
一方、**`[;](セミコロン)`があれば、それは文**です。つまり、式に`;`を付けると文になります。

### トークン
コードで**意味を持つ最小の単位**は、英語等の「単語」に当たる**トークン**と呼ばれるものです。
トークンはキーワード、識別子、リテラル、演算子、区切り記号などに分けられます。
詳しくは追々ですが、キーワードはC++規格で予約されているトークンのことです。
また、識別子はアルファベットや数字、演算子と区切り文字は記号で構成されます。

### トークンの区切りとホワイトスペース
トークン同士は、ホワイトスペースもしくは演算子、区切り記号のトークンで区切られます。
それぞれのトークンの間には**自由にホワイトスペースなどを追加**することが出来ます。
ちなみに、ホワイトスペースはスペース、水平/垂直タブ、改行、改ページのことです。

## `std::cout << "Hello World!\n"`;を分解
それではトークンに分解すると、`std::cout`、`<<`、`"Hello World!\n"`、`;`の四つになります。
`;`というのは**文であることを示すトークン**なので他の三つを見ていきましょう。

### 標準出力と`std::[cout](シーアウト)`
標準出力は、標準で用意されている出力先のことで、大体はコンソールです。
C++で標準出力を表すのは`std::cout`で、**紐づいている先に文字を出力する**ことが出来ます。
ただ、大抵の場合はコンソールに紐づいて居るので、**コンソールに出力する**ために使います。
`std::cout`の詳しいことは追々扱うので今はこのような理解をしてください。

### ストリーム演算子こと左シフト演算子
`<<`は、俗に「ストリーム演算子」と呼ばれることもある「左シフト演算子」です。
左に`std::cout`、右に「値」があると、右の「値」を`std::cout`に渡し、出力します。
また、`std::cout << "Hello World!\n" << 10;`のように、**連鎖する**ことが出来ます。

### リテラル
コード上に**直接書かれているデータ**のことを**リテラル**と呼びます。
主なリテラルとして、整数/小数/文字/文字列/真偽リテラルが存在し、一行で書きます。
整数/小数は、**単純に数字を直接書く**ことでリテラルとして表現することが出来ます。
真偽リテラルについては追々やるので、今は見なかったことにして進みましょう。

### 文字/文字列リテラル
**文字/文字列はそれぞれ`['](シングルクオーテーション)`/`["](ダブルクオーテーション)`で囲う**必要があります。
それは、**文法に従わないデータ部分**で、C++の文法部分とは区別する必要があるからです。
結局`"Hello World!\n"`というのは、即ち**文字列のデータ**のことなのです。

### エスケープシーケンス
文字列リテラルの中では、特殊記法である**エスケープシーケンス**を用いる必要があります。
特に使うのは以下で、これらから`"Hello World!\n"`は`Hello World!`と**改行**だとわかります。

*- 特に使うエスケープシーケンス
- \\	バックスラッシュ（円記号）
- \"	ダブルクオーテーション
- \n	{Line Feed（改行）}
- \t	水平タブ

## 練習問題
次に示す出力結果になるように、**整数/小数/文字/文字/文字列リテラルを使って**コードを書きましょう。
ただし、**回答例はあくまで回答例**なので、**実行結果と問題の制約**を満たせば問題ありません。
また、問題がわからない場合などに**読み直したり、調べること**も問題ないとします。

```cmd 出力結果
> C++ is a good programming language.
> 42 2021.05
```

@``cpp 回答例
#include <iostream>

int main() {
	std::cout << "C++ is a good programming language.\n"
		<< 42 << ' ' << 2021.05;
}
```

@ 解説

## 参照、出典

-* 参照
-  https://cpprefjp.github.io/implementation-compliance.html

</main>