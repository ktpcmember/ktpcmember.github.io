      <article class="cb21 fxtb">
       <h2 class="cb33">オーバーロード</h2>
       <span class="cb34">
        最後に関数のオーバーロードについてです。
       </span>
      </article>
      <article class="cb21 fxrl">
       <div class="cb37">
        <div class="cb46">
         <span class="cb54">オーバーロード</span>
         <button type="button" class="cb53" onclick="copy('saco3')">
          <span class="cb61">COPY</span>
         </button>
        </div>
        <code class="cb47">
<pre id="saco_3" class="cb55 bkgdbl">
<span class="wdp_q_p_csc_md">#include</span> <span class="wdsl">&lt;</span>Windows.h<span class="wdsl">&gt;</span>
<span class="wdp_q_p_csc_md">#include</span> <span class="wdsl">&lt;</span>string<span class="wdsl">&gt;</span>

<span class="wdkywd">void</span> show<span class="wdsl">()</span> <span class="wdsl">{</span>
    MessageBox<span class="wdsl">(</span>NULL<span class="wdsl">,</span> <span class="wdtt">L"Hogeがほげしてほげほげ"</span><span class="wdsl">,</span> <span class="wdtt">L"No argument"</span><span class="wdsl">,</span> MB_OK<span class="wdsl">);</span>
    <span class="wdkywd">return</span><span class="wdsl">;</span>
<span class="wdsl">}</span>

<span class="wdkywd">void</span> show<span class="wdsl">(</span><span class="wdkywd">int</span> a<span class="wdsl">)</span> <span class="wdsl">{</span>
    MessageBox<span class="wdsl">(</span>NULL<span class="wdsl">,</span> std<span class="wdsl">::</span>to_wstring<span class="wdsl">(</span>a<span class="wdsl">)</span>.c_str<span class="wdsl">(),</span> <span class="wdtt">L"int"</span><span class="wdsl">,</span> MB_OK<span class="wdsl">);</span>
    <span class="wdkywd">return</span><span class="wdsl">;</span>
<span class="wdsl">}</span>

<span class="wdkywd">void</span> show<span class="wdsl">(</span><span class="wdkywd">double</span> a<span class="wdsl">)</span> <span class="wdsl">{</span>
    MessageBox<span class="wdsl">(</span>NULL<span class="wdsl">,</span> std<span class="wdsl">::</span>to_wstring<span class="wdsl">(</span>a<span class="wdsl">)</span>.c_str<span class="wdsl">(),</span> <span class="wdtt">L"double"</span><span class="wdsl">,</span> MB_OK<span class="wdsl">);</span>
    <span class="wdkywd">return</span><span class="wdsl">;</span>
<span class="wdsl">}</span>

<span class="wdkywd">void</span> show<span class="wdsl">(</span>std<span class="wdsl">::</span>wstring a<span class="wdsl">)</span> <span class="wdsl">{</span>
    MessageBox<span class="wdsl">(</span>NULL<span class="wdsl">,</span> a.c_str<span class="wdsl">(),</span> <span class="wdtt">L"std::wstring"</span><span class="wdsl">,</span> MB_OK<span class="wdsl">);</span>
    <span class="wdkywd">return</span><span class="wdsl">;</span>
<span class="wdsl">}</span>

<span class="wdkywd">int</span> wWinMain<span class="wdsl">(</span>HINSTANCE<span class="wdsl">,</span> HINSTANCE<span class="wdsl">,</span> LPWSTR<span class="wdsl">,</span> <span class="wdkywd">int</span><span class="wdsl">)</span> <span class="wdsl">{</span>
    show<span class="wdsl">();</span>
    show<span class="wdsl">(</span><span class="wdnr">1</span><span class="wdsl">);</span>
    show<span class="wdsl">(</span><span class="wdnr">2.3</span><span class="wdsl">);</span>
    show<span class="wdsl">((</span>std<span class="wdsl">::</span>wstring<span class="wdsl">)</span><span class="wdtt">L"aiueo"</span><span class="wdsl">);</span>

    <span class="wdkywd">return</span> <span class="wdnr">0</span><span class="wdsl">;</span>
<span class="wdsl">}</span>
</pre>
        </code>
       </div>
      </article>
      <article class="cb21">
       <div class="cb31">
        <h3 class="cb40">シグネチャ</h3>
        <span class="cb41">
         シグネチャは、関数の名前と関数の引数並びのことです。<br>
         実は、C++ではシグネチャが異なると別の関数が定義出来るのです。<br>
         なお、シグネチャはシグネチャーやシグニチャとも呼びます。
        </span>
       </div>
      </article>
      <article class="cb21">
       <div class="cb31">
        <h3 class="cb40">オーバーロード</h3>
        <span class="cb41">
         オーバーロードは同名で、引数並びが異なる関数を定義することです。<br>
         すなわち、引数の型や引数の数、引数の型の組み合わせが異なる関数を定義することです。<br>
         オーバーロードの定義からもわかりますが、同名で返り値のみが違う関数は定義出来ません。<br>
         オーバーロードを使うと同じようなコードで複数の状況に対応することが出来ます。
        </span>
       </div>
      </article>
      <article class="cb21 fxtb">
       <h2 class="cb33">コード「オーバーロード」解説</h2>
       <span class="cb34">
        コード「オーバーロード」についての解説です。
       </span>
      </article>
      <article class="cb21">
       <div class="cb31">
        <h3 class="cb40">show関数</h3>
        <span class="cb41">
         show関数はオーバーロードされた関数です。<br>
         引数なし、<code>int</code>、<code>double</code>、<code>std::wstring</code>に対して定義されています。<br>
         引数なしの場合は<code>Hogeがほげしてほげほげ</code>を、<br>
         それ以外は引数で取った値をメッセージボックスで表示させています。
        </span>
       </div>
      </article>
      <article class="cb21">
       <div class="cb31">
        <h3 class="cb40">show関数呼び出し</h3>
        <span class="cb41">
         show関数はオーバーロードされています。<br>
         そのため全く同一の<code>show()</code>という呼び出しでありながら、異なる関数を呼び出しています。
        </span>
       </div>
      </article>