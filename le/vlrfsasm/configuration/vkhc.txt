
ht.summary.caption
本章では、HP内のページを記述するための準備を解説します。また、ページの本文のうち、題や見出しについても解説します。中身は次章です。

ht.file.caption
まずは、必要なファイルを準備しましょう。ここでは、[P;start.html]を生成することにします。

ht.file.folder
フォルダは、必ずページごとに作りましょう。ページのhtmlと同名がいいでしょう。
例えば、[P;start/start.html]のようにします。

ht.file.bat
作ったバッチフォルダ内に、[P;vc.bat]を作りましょう。中身は以下です。
[PMT;[P;vc.bat];,(hi.vc.bat)]
ただし、赤下線部は、次々項で作る[P;.vlra]ファイルの名前に合わせて変えてください。

ht.file.body
次に、[P;vkhc.txt]ファイルを作り、そのままにしておいてください。次章で書き方を解説します。
なお、前項の[P;vc.bat]ではこのファイルを指定しませんでした。名前を固定する代わりに、指定する手間を減らしています。詳しくは、技術的な解説を参照してください。

ht.file.vlra
それでは、[P;start.vlra]を作りましょう。もちろん、出力するhtmlが[P;start.html]でなければ、そちらの名前に合わせるのがよいでしょう。

ht.configuration.caption
ここで解説する要素のうちいくつかは、ページを開いた際に直接に見るものではありません。しかし、変換器の動作や、検索時のヒット率に関わる、重要なものです。
以下の内容は全て[P;.vlra]ファイルに書いてもらいます。各講習でテンプレートを用意し、編集しつつ複製すると楽でしょう。

ht.configuration.path
HTMLで画像などを表示するときには、画像ファイルのパスを指定します。パスの指定方法には2種類あります。
「絶対パス」では、[P;www.ktpc.tokyo]から目的のファイル名まで全てを書きます。ブラウザはこのアドレスにアクセスし、サーバーからデータをもらいます。
「相対パス」では、HTMLファイルが置かれているディレクトリを基準にして書きます。[P;../]と書くと、親ディレクトリを指定できます。
以下の例では、[P;www.ktpc.tokyo/le/le.html]を基準としています。
]例;絶対パス;相対パス
;[P;www.ktpc.tokyo/le/vlrfsasm/vlrfsasm.html];[P;vlrfsasm/vlrfsasm.html]
;[P;www.ktpc.tokyo/index.html];[P;../index.html]
どちらにも長所と短所がありますが、本HP内から本HP内のパスを指定する際は、相対パスがよいでしょう。まず、ほとんどの場合、見ての通り短く書けます。また、コンピュータのローカルのファイルからの相対パスは、同様にローカルのファイルを参照するため、インターネットなしでもリンク切れを起こしません。インターネットに繋がっていても、コミット内容の反映には時間がかかるので、やはり相対パスが有利です。
絶対パスの長所は、1つのパスが、どのファイルにおいても同じ意味を持つことです。相対パスでは、階層構造を考慮する必要が出てきます。
本変換器では、両者の利点を活かす折衷案を用意しています。[v;hp.getRelativePath]関数は、[P;www.ktpc.tokyo]を基準とした相対パスを引数に取り、HTMLファイルのディレクトリを基準とした相対パスを返します。
さて、前置きが長くなりました。[v;hp.getRelativePath]関数は、HTMLファイルのパスを知らなければ動作しません。これを指定するのが、[v;hp.path]関数です。引数なしの定数関数として定義してください。返り値は、[P;www.ktpc.tokyo]を基準とした相対パスを指定します。HTMLファイルの名前まで指定してください。他の用途もあります。

ht.configuration.html
HTMLには、文章の記述以外にも、検索という用途があります。このため、本変換器でも以下の3つを設定するようにしています。なお、全て引数なしの定数関数として、必ず定義してください。
];項目;関数名;例
;キーワード;hh.keyword;[T;プログラミング,講習, Vlrfsasm]
;説明;hh.description;[T;駒場東邦物理部(KTPC)部員向けVlrfsasm講習の資料です。]
;題;hh.title;[T;設定 - Vlrfsasm講習 - 駒場東邦物理部]
キーワードは[T;`,`]区切りで複数指定できます。
なお、例は本章のページのものです。

ht.configuration.css
本変換器によるHTMLのスタイルを定めるCSSファイルは、[P;https://www.ktpc.tokyo/tool/vlrfsasmKtpc/style/default.css]です。しかし、講習ごとにスタイルを変える、あるいは新しいスタイルを追加する、といった需要もあるでしょう。そこで、定数関数[v;hu.extraCssPath]を定義します。返り値にはCSSファイルのパスを指定してください。なお、使わない場合でも、空文字列を返す関数として定義しておきましょう。
また、[P;default.css]と同フォルダに[P;narrow.css]が入っていますが、これはスマホ向けです。[v;hu.extraNarrowCssPath]も同様に定義してください。画面の幅によって、追加で適用されるようになります。
これらのCSSファイルの優先順位は、以下の表で下のものほど高いです。つまり、スタイルの衝突時には、下のものによって上書きされます。
]CSSの優先順位;[P;default.css]
;[P;narrow.css]
;[v;hu.extraCssPath]
;[v;hu.extraNarrowCssPath]

ht.menu.caption
本HPの各ページ上部には、メニューが表示されます。メニューの内容もページによって変えることができますが、テンプレートを用意しています。テンプレートの選択は、[v;hm.linkType]関数を定義して行います。

ht.menu.lectureIndex
テンプレートの1つめは、講習資料の目次向けです。
[vMT;講習資料目次;`{hm.linkType; ; (hm.linkType.lectureIndex)}`]
このように定義すると、メニューが自動で生成されます。先ほどの[v;hp.path]できちんと指定しないと、ここで自身へのリンクが含まれてしまうので、注意してください。講習の一覧は、[P;tool/vlrfsasmKtpc/le/lectureList.vlra]で定義されています。新しい講習を追加する際には、ここを更新し、他の講習者にも目次ページの更新を依頼してください。

ht.menu.lectureChapter
テンプレートの2つ目は、講習資料の各章のページを想定しています。
[vMT;講習資料目次;`{hm.linkType; ; (hm.linkType.lectureChapter)}`]
このテンプレートでは、これに加えて4から6個の定数関数を定義する必要があります。
[vMT;講習名と目次パス;`{hm.lectureName; ; "Vlrfsasm講習"}
{hm.lectureTopPath; ; "../vlrfsasm.html"}`]
[vMT;前章と次章;`{hm.previousChapterPath; ; "../structure/structure.html"}
{hm.previousChapterName; ; "仕組み"}
{hm.nextChapterPath; ; "../body/body.html"}
{hm.nextChapterName; ; "本文"}`]
なお、[T;ChapterPath]を空文字列にすると、リンクは生成されません。このとき、対応する[T;ChapterName]は使われないので、定義する必要はありません。
[vMT;第1章の例;`{hm.previousChapterPath; ; ""}
[previousChapterNameは省略]`]

ht.body.caption
いよいよ本文に入ります。なお、前述の通り、本文の内容を書くのは次章からです。
本節では、節と項の構造を説明します。

ht.body.title
本変換器は、[v;hc.content]関数の返り値を、本文として組み込みます。
また、[v;hc.title]関数は、文字列を1つ引数にとって、題名のHTML要素を返します。
[vMT;本章の設定の一部;`{hc.content; ;
  ('
    (hc.title "Vlrfsasm講習/設定")
    [節1]
    [節2 ...]
  )
}`]

ht.body.article
節を返す関数は2つあります。
[v;hc.article]は、第一引数に節の見出し、第二引数に節の内容をとります。内容は、次項で解説する項を1つ以上入れるか、または[v;c.empty]にしてください。
[v;hc.articleCa]は、見出しの次に引数が1つ増え、節全体の概説を入れることができます。こちらには、項ではなく、次々項の段落群を入れてください。

ht.body.section
項は、[v;hc.section]で生成します。第一引数に見出し、第二引数に段落群を指定しましょう。

ht.body.division
ここでは「段落群」という言葉を用いますが、これは単に「段落」というと一段落限定のように見えるからです。実際には、1個以上のいくつでも段落を含められます。
さて、段落群の内容は次章で記述します。見た目は異なるものの、実質的には定数関数を定義するだけです。
関数の返り値は、関数を呼び出せば得られます。呼び出しには名前が必要です。作者の命名規則は、[T;ht.<節名>.<項名>]というものです。
まず、接頭辞は[T;ht.]とします。[T;h]はHTML、[T;t]はtextを指していたのだと思いますが、記憶は曖昧です。ともかく、他の場所では使っていないので、これを使っておけば衝突を避けられます。
節名と項名については、英単語1語がよいでしょう。もちろん、vlrfsasmの符として正しければ、何でも構いません。

ht.body.example
面倒なので、実際に[l;本章の設定ファイル;https://github.com/ktpcmember/ktpcmember.github.io/blob/master/le/vlrfsasm/configuration/configuration.vlra]を見てください。
なお、本章では、概説なしの[v;hc.article]を使っていません。
