
{ht.summary.caption; ; (' (hc.p (' "Vlrfsasmは、純粋な関数型言語です。別の言い方をすれば、関数以外にプログラミング要素はありません。関数を使いこなすことができれば、Vlrfsasmでできることはほぼ全てできます。")))}
{ht.summary.error; ; (' (hc.p (' "本章以降、実行するとエラーが発生する可能性があります。指定した" (hx.P (' ".log")) "ファイルに書き込まれているはずなので、" (hx.l (' "エラーの章") (' "../error/error.html")) "と一緒に読んでください。")))}
{ht.definition.caption; ; (' (hc.p (' "まずは関数の定義を学びましょう。")) (hc.table (' "関数の要素") (' "tXC") (' (hc.tr (' (hc.td (' "名前") "") (hc.td (' "関数を他の関数と区別する識別子") ""))) (hc.tr (' (hc.td (' "引数") "") (hc.td (' "実行前に関数に渡される値") ""))) (hc.tr (' (hc.td (' "返り値") "") (hc.td (' "関数から実行後に返される値") ""))))))}
{ht.definition.name; ; (' (hc.p (' "関数の名前には、制限があります。")) (hc.table (' "") (' "tXC") (' (hc.tr (' (hc.td (' "規則") "") (hc.td (' "良い例") "") (hc.td (' "悪い例1") "") (hc.td (' "悪い例2") ""))) (hc.tr (' (hc.td (' "単一の符であること") "") (hc.td (' (hx.v (' "getSecondElement")) "") "") (hc.td (' (hx.v (' "get element2")) "") "") (hc.td (' (hx.v (' "getElement(second)")) "") ""))) (hc.tr (' (hc.td (' "リテラルの形でないこと") "") (hc.td (' (hx.v (' "階乗")) "") "") (hc.td (' (hx.v (' "\"factorial\"")) "") "") (hc.td (' (hx.v (' "0x66")) "") ""))) (hc.tr (' (hc.td (' "唯一の名前であること") "") (hc.td (' (hx.v (' "ifContainedIt")) "と" (hx.v (' "ifContainEdit")) "") "") (hc.td (' (hx.v (' "ifcontainedit")) "") "") (hc.td (' "") ""))))))}
{ht.definition.argument; ; (' (hc.p (' "関数のうち、どのように呼び出しても同じ結果が返ってくるものを、定数関数といいます。")) (hc.p (' "逆に言えば、定数関数以外の関数は、条件によって異なる結果を返します。この条件を関数に与えるのが引数です。ただし、Vlrfsasmにおいては、関数が使わない引数を持っていても構いません。")) (hc.p (' "引数の数は1つの関数につき1通りのみです。全ての値が引数になれます。前章の通り、型はありません。また、1つの関数が17個以上の引数をもつことはできません。")) (hc.p (' "引数の名前の規則は、前項に示した関数の名前の規則とほぼ同じです。ただし、他の関数の引数とは、名前が被っていても構いません。類似の関数であれば、引数名が共通であると読みやすいでしょう。")))}
{ht.definition.return; ; (' (hc.p (' "関数を実行すると、結果が返されます。Vlrfsasmにおいては、必ずちょうど1つの値を返さなくてはなりません。この値のことを返り値といいます。")))}
{ht.definition.syntax; ; (' (hc.p (' "実際に関数を定義する構文は、以下の通りです。")) (hc.p (' (hx.vMT (' "関数定義") (' (hi.definition.vlra.txt))))) (hc.p (' "ここで、" (hx.uRed (' "関数名")) "と" (hx.uBlue (' "返り値")) "が必ず存在し、" (hx.uGreen (' "引数")) "が任意にあることがわかると思います。")))}
{ht.definition.position; ; (' (hc.p (' "関数の定義位置は、言語によって異なります。")) (hc.table (' "定義位置の主な例") (' "tXC") (' (hc.tr (' (hc.td (' "A") "") (hc.td (' "関数を呼び出す位置より前") ""))) (hc.tr (' (hc.td (' "B") "") (hc.td (' "プログラムの実行時より前") ""))) (hc.tr (' (hc.td (' "C") "") (hc.td (' "関数を呼び出す時より前") ""))) (hc.tr (' (hc.td (' "D") "") (hc.td (' "プログラムが終了する前") ""))))) (hc.p (' "VlrfsasmはCにあたります。実行されない関数は未定義であっても構わないのがBとの違いです。")))}
{ht.output.caption; ; (' (hc.p (' "Vlrfsasmの実行結果は、ファイルで出力されます。この出力内容を定めるのが、出力関数です。")))}
{ht.output.name; ; (' (hc.p (' "出力関数の名前は、ピリオド1字" (hx.v (' ".")) "です。これは言語仕様なので、別の関数を出力関数にしたり、この名前を出力関数でないようにするといったことはできません。ただし、出力関数の中で別の関数を呼び出せば、前者は実質的に実現できます。")) (hc.p (' "また、符がピリオド1字のみの場合が出力関数になるので、他の文字も含む名前は自由に使えます。")))}
{ht.output.usage; ; (' (hc.p (' "出力関数は、他の関数と同じく1度しか定義できず、その返り値が実行結果として出力されます。つまり、Vlrfsasmで出力できる値は1つだけです。")) (hc.p (' "Vlrfsasmは、ソースコードを解釈した後、出力関数を実行します。そして、返り値を決定できるまで、定義に含まれる関数を次々に呼び出します。他の関数から呼び出されるものではないので、引数はありません。引数を定義してしまうとエラーになる可能性があります。")))}
{ht.output.example; ; (' (hc.p (' "出力関数を定義し、実行してみましょう。")) (hc.p (' "基点フォルダ内に、作業フォルダ" (hx.P (' "function")) "を作り、バッチファイルをコピーしてきましょう。また、ソースコードは" (hx.P (' "source.vlra")) "という名前を付け、UTF-8で保存することを思い出してください。")) (hc.p (' (hx.vMT (' "64ビットの値$721F803Bを出力するコード") (' "{.; ; $721F803B}")))))}
{ht.call.caption; ; (' (hc.p (' "ここまで断りもなく「呼び出し」という言葉を使ってきましたが、これについて解説します。関数の定義を先に説明しないと、例を実行できないためでした。")))}
{ht.call.syntax; ; (' (hc.p (' "関数を呼び出す構文は、「S式」というものを採用しています。これは、関数名と引数を、丸かっこ内にスペース区切りで並べるものです。あまり普及はしていませんが、Vlrfsasmの構文は他に関数定義のものしか必要としません。汎用性が高く、とても簡潔に書ける構文なのです。")) (hc.p (' "例を見てみましょう。丸かっこ内の最初の符が関数名で、2つ目以降の符は引数です。なお、引数の個数はその関数の定義と一致する必要があります。順番も書いた順がそのまま割り当てられます。引数には、リテラル、呼び出し元関数の引数、または別の関数の返り値を指定できます。")) (hc.p (' (hx.vMT (' "関数呼び出しの例") (' (hi.example.txt))))))}
{ht.call.stack; ; (' (hc.p (' "動作の面から言うと、Vlrfsasmはスタックマシンです。関数の呼び出し時の引数は、その関数内で別の関数を呼び出したり、自己再帰をしても、変化しません。")) (hc.p (' "スタックの深さには限りがあり、現在は128段以上の呼び出しができません。再帰を使う際には注意してください。")))}
{ht.test.caption; ; (' (hc.p (' "本章からは、簡単な問題を付けておきます。")))}
{ht.test.question1; ; (' (hc.p (' "関数" (hx.v (' "+")) "は、定義済みの関数で、加算を表します。この関数は、例外的に可変個の引数を持ちます。1個以上ならいくつでもよいのです。")) (hc.p (' "さて、これを用いて計算をしましょう。非負整数をいくつか決めてください。そして、その和をもとめ、10進文字列にしてUTF-8形式で出力してください。ただし、和は" (hx.m (' (hx.1.8*1 (' "10") (' "19")) "")) "以下になるようにしましょう。")))}
{ht.test.question2; ; (' (hc.p (' "関数" (hx.m (' "f(x)=2x+5")) "を定義してください。なお、関数名等との区別をつけるため、引数名は大文字で始めるとよいでしょう。")))}