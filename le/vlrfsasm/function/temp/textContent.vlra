
{ht.summary.caption; ; (' (hc.p (' "Vlrfsasmは、純粋な関数型言語です。別の言い方をすれば、関数以外にプログラミング要素はありません。関数を使いこなすことができれば、Vlrfsasmでできることはほぼ全てできます。")))}
{ht.summary.error; ; (' (hc.p (' "本章以降、実行するとエラーが発生する可能性があります。指定した" (hx.P (' ".log")) "ファイルに書き込まれているはずなので、" (hx.l (' "エラーの章") (' "../error/error.html")) "と一緒に読んでください。")))}
{ht.definition.caption; ; (' (hc.p (' "まずは関数の定義を学びましょう。")) (hc.table (' "関数の要素") (' "tXC") (' (hc.tr (' (hc.td (' "名前") "") (hc.td (' "関数を他の関数と区別する識別子") ""))) (hc.tr (' (hc.td (' "引数") "") (hc.td (' "実行前に関数に渡される値") ""))) (hc.tr (' (hc.td (' "返り値") "") (hc.td (' "関数から実行後に返される値") ""))))))}
{ht.definition.name; ; (' (hc.p (' "関数の名前には、制限があります。")) (hc.table (' "") (' "tXC") (' (hc.tr (' (hc.td (' "規則") "") (hc.td (' "良い例") "") (hc.td (' "悪い例1") "") (hc.td (' "悪い例2") ""))) (hc.tr (' (hc.td (' "単一の符であること") "") (hc.td (' (hx.v (' "getSecondElement")) "") "") (hc.td (' (hx.v (' "get element2")) "") "") (hc.td (' (hx.v (' "getElement(second)")) "") ""))) (hc.tr (' (hc.td (' "リテラルの形でないこと") "") (hc.td (' (hx.v (' "階乗")) "") "") (hc.td (' (hx.v (' "\"factorial\"")) "") "") (hc.td (' (hx.v (' "0x66")) "") ""))) (hc.tr (' (hc.td (' "唯一の名前であること") "") (hc.td (' (hx.v (' "ifContainedIt")) "と" (hx.v (' "ifContainEdit")) "") "") (hc.td (' (hx.v (' "ifcontainedit")) "") "") (hc.td (' "") ""))))))}
{ht.definition.argument; ; (' (hc.p (' "関数のうち、どのように呼び出しても同じ結果が返ってくるものを、定数関数といいます。")) (hc.p (' "逆に言えば、定数関数以外の関数は、条件によって異なる結果を返します。この条件を関数に与えるのが引数です。ただし、Vlrfsasmにおいては、関数が使わない引数を持っていても構いません。")) (hc.p (' "引数の数は1つの関数につき1通りのみです。全ての値が引数になれます。前章の通り、型はありません。また、1つの関数が17個以上の引数をもつことはできません。")) (hc.p (' "引数の名前の規則は、前項に示した関数の名前の規則とほぼ同じです。ただし、他の関数の引数とは、名前が被っていても構いません。類似の関数であれば、引数名が共通であると読みやすいでしょう。")))}
{ht.definition.return; ; (' (hc.p (' "関数を実行すると、結果が返されます。Vlrfsasmにおいては、必ずちょうど1つの値を返さなくてはなりません。この値のことを返り値といいます。")))}
{ht.definition.syntax; ; (' (hc.p (' "実際に関数を定義する構文は、以下の通りです。")) (hc.p (' (hx.vMT (' "関数定義") (' (hi.definition.vlra.txt))))) (hc.p (' "ここで、" (hx.uRed (' "関数名")) "と" (hx.uBlue (' "返り値")) "が必ず存在し、" (hx.uGreen (' "引数")) "が任意にあることがわかると思います。")))}
{ht.definition.position; ; (' (hc.p (' "関数の定義位置は、言語によって異なります。")) (hc.table (' "定義位置の主な例") (' "tXC") (' (hc.tr (' (hc.td (' "A") "") (hc.td (' "関数を呼び出す位置より前") ""))) (hc.tr (' (hc.td (' "B") "") (hc.td (' "プログラムの実行時より前") ""))) (hc.tr (' (hc.td (' "C") "") (hc.td (' "関数を呼び出す時より前") ""))) (hc.tr (' (hc.td (' "D") "") (hc.td (' "プログラムが終了する前") ""))))) (hc.p (' "VlrfsasmはCにあたります。実行されない関数は未定義であっても構わないのがBとの違いです。")))}