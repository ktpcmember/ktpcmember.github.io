
ht.summary.caption
本章では、Vlrfsasmの文法について解説します。

ht.summary.previousChapter
前章の最後で「Hello world!」を出力しましたが、実のところあれはかなり高度な内容を含むので、解説は後の章で行います。

ht.value.caption
Vlrfsasmでは、データのことを「値」と呼びます。

ht.value.body
値は、順序と方向をもつ1次元のビット列で表現されます。値には、型などの情報を分けて付加することはできません。全てこのビット列に埋めこむ必要があるので、利用する構造体には、判別できる情報を予め加えましょう。

ht.value.width
値に含まれるビットの数を、「幅」と言います。「長さ」や「大きさ」も、Vlrfsasmにおいては同義語です。値は、0以上524288以下の個数のビットを含むことができますが、この範囲外の幅をもつ値は処理できず、エラーとなります。なお、この上限は、65536バイトや64KBとも言い換えられます。

ht.syntax.caption
ほとんどのプログラミング言語には文字があり、その並べ方が規定されています。Vlrfsasmにおいても、いくらかの決まりがありますが、多くは直感的に理解できると思います。

ht.syntax.character
Vlrfsasmでは、Unicodeの全ての文字を許容していますが、特別な意味をもつものはASCIIの範囲のみです。
[msM;Vlrfsasmで特別な意味を持つ字;,(hi.character.txt)]
これ以外の文字、例えば[ms;Z]、[ms;σ]、[ms;じ]、[ms;字]、[ms;자]などは自由に使って構いません。しかし、特に日本語の設定での入力中は、全角スペースを避けましょう。Vlrfsasmはこれと半角スペースとを区別しますが、見た目ではわからず、バグを生みます。

ht.syntax.token
どんな言語でも、1字では意味を全て区別できません。いくつかの字をまとめ、単語として解釈することになります。英語ならスペースで区切れば単語を切り出せます。Vlrfsasmにおいても、区切り文字と括弧、文字列リテラル標識とコメント標識で単語を分けます。前節の文字一覧を参照してください。また、英語であれば[ms;.]や[ms;?]は単語として認められませんが、Vlrfsasmでは認めます。そこで、Vlrfsasmでは、これらの意味のまとまりのことを「符」と呼ぶことにしています。

ht.syntax.comment
動くプログラムと読みやすいプログラムは違います。他の人が読む場合、あるいは未来の自分が読む場合を考えて、簡単なメモを残しておくと、生産性がとても上がります。もちろん、プログラム中に突然、日本語や英語が書くわけにはいきません。Vlrfsasmはこのための「コメント」という機能を持っています。コメント開始標識[ms;`[`]からコメント終了標識[ms;`]`]までは、符として解釈されません。

ht.literal.caption
Vlrfsasmはデータを変換して出力するプログラムです。変換対象のデータを入力する方法は2つあります。一方がソースファイル内に記述するもので、リテラルと呼ばれます。もう一方の生ファイルについては、後の章で説明します。

ht.literal.numeral
リテラルはさらに2種類に分けられます。片方は数値をそのまま記述する「数値リテラル」です。Vlrfsasmのコード中で、[uc;red;数字]または後述の[uc;blue;基数接頭辞]から始まる単語は、数値リテラルとして認識されます。
[vM;数値リテラルの始めの文字;`[?u;red]0123456789[?e][?u;blue]$%[?e]`]
数値リテラルによる値の幅は、リテラルの桁数などに関わらず、64ビットになります。これを超える長さの値を表したいときは、後述の結合関数や、生ファイルを使うことになります。
