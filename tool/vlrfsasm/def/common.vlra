[def/common.vlra
 Copyright 2021 vlrfsg]

[S8:utf-8, Sx:utf-16, Sb:utf-16BE, Sl:utf-16LE, C:codepoint]

[empty]
{c.empty; ; (: 0 0)}

[negate]
{c.negate A; ; (+ (! A) 1)}

[unsigned sub]
{- A B; ; (+ A (c.negate (: B (# A))))}

[get]
{c.getRange A B C; ; (: (> A B) C)}
{c.getBit A B; ; (c.getRange A B 1)}
{c.getSign A; ;
  (?
    (# A)
    (c.getBit A (- (# A) 1))
    (: 0 1)
  )
}

[sign extend]
{:- A B; ;
  (?
    (|
      (! (c.getSign A))
      (>= (# A) (: B 64))
    )
    (: A B)
    (' (! (: 0 (- (: B 64) (# A))) A))
  )
}

[signed add, sub]
{+- A B; ; (+ A (:- B (# A)))}
{-- A B; ; (- A (:- B (# A)))}

[unsigned compare]
{== A B; ; (: (? (^ A (: B (# A))) 0 1) 1)}
{!= A B; ; (! (== A B))}
{<! A B; ; (c.getSign (- A B))}
{<= A B; ; (| (<! A B) (== A B))}
{>! A B; ; (! (<= A B))}
{>= A B; ; (! (<! A B))}

[signed compare]
{==- A B; ; (: (? (^ A (:- B (# A))) 1 0) 1)}
{!=- A B; ; (^ (==- A B) 1)}
{<!- A B; ; (c.getSign (-- A B))}
{<=- A B; ; (| (<!- A B) (==- A B))}
{>!- A B; ; (! (<=- A B))}
{>=- A B; ; (! (<!- A B))}

[multiply]
{* A B; ;
  (:
    (*.loop B A (' (: 0 (# A)) (- (# A) 1)))
    (# A)
  )
}
{*.loop A 1 B C; ;
  (?
    (: C 64)
    (c.empty)
    (+ (> C 64) (? A B 0))
  );
  ('
    (+ (> C 64) (? A (< B (: C 64)) 0))
    (- (: C 64) 1)
  )
}
{*- A B; ;
  (?
    (c.getSign B)
    (* (c.negate A) (: (c.negate B) (# A)))
    (* A B)
  )
}

[divide]
{/ A B; ;
  (?
    B
    (: (/.loop A B (: 0 (# B))) (# A))
    (c.errorSb "Division by zero")
  )
}
{/.loop A 1 B C; ;
  (>= (' C A) B);
  (:
    (?
      (>= (' C A) B)
      (- (' C A) B)
      (' C A)
    )
    (# B)
  )
}
{/- A B; ;
  (?
    (c.getSign A)
    (?
      (c.getSign B)
      (/ (c.negate A) (c.negate B))
      (c.negate (/ (c.negate A) B))
    )
    (?
      (c.getSign B)
      (c.negate (/ A (c.negate B)))
      (/ A B)
    )
  )
}

[modulo: Undefined on signed number]
{c.modulo A B; ;
  (?
    B
    (: (c.modulo.loop A B (' (: 0 (# B)) (# A))) (# B))
    (c.errorSb "Division by zero")
  )
}
{c.modulo.loop A 1 B C; ;
  (?
    (!= (: C 64) 1)
    (c.empty)
    (?
      (>= (' (> C 64) A) B)
      (- (' (> C 64) A) B)
      (' (> C 64) A)
    )
  );
  ('
    (?
      (>= (' (> C 64) A) B)
      (- (' (> C 64) A) B)
      (' (> C 64) A)
    )
    (- (: C 64) 1)
  )
}

[align]
{c.align A B; ; (? (& A (- B 1)) (+ (^ A (& A (- B 1))) B) A)}
{c.alignS A B; ; (< A (- (c.align (# A) B) (# A)))}

[string length]
{c.getLengthS8 A; ; (> (# A) 3)}
{c.getLengthSx A; ; (> (# A) 4)}

[Compare both Value and Length]
{c.compareStrict A B; ; (& (== (# A) (# B)) (== A B))}

[convert integer to string]
{c.convertIC A; ;
  (? (<! A 10) (+ "0" A) (+ "A" (- A 10)))
}
{c.convertISbR A B; ;
  (?
    A
    (' (c.convertISbR (/ A B) B) (c.convertIC (c.modulo A B)))
    (c.empty)
  )
}
{c.convertISb A B; ; (? A (c.convertISbR A B) "0")}
{c.convertISb- A B; ;
  (?
    (c.getSign A)
    (' "-" (c.convertISb (c.negate A) B))
    (c.convertISb A B)
  )
}
{c.cnvISbFixed A B C; ;
  ('
    (?
      (>= (> (# (c.convertISb A B)) 4) C)
      (c.empty)
      (c.repeat "0" (- C (c.getLengthSx (c.convertISb A B))))
    )
    (c.convertISb A B)
  )
}

[Convert utf-16 to utf-8]
{c.convertCS8 A; ;
  (?
    (>= $7F A)
    (: A 8)
    (?
      (>= $07FF A)
      ('
        (: %110 3) (c.getRange A 6 5)
        (: %10 2) (c.getRange A 0 6)
      )
      (?
        (>= $FFFF A)
        ('
          (: %1110 4) (c.getRange A 12 4)
          (: %10 2) (c.getRange A 6 6)
          (: %10 2) (c.getRange A 0 6)
        )
        ('
          (: %11110 5) (c.getRange A 18 3)
          (: %10 2) (c.getRange A 12 6)
          (: %10 2) (c.getRange A 6 6)
          (: %10 2) (c.getRange A 0 6)
        )
      )
    )
  )
}
{c.convertSbS8.loop A 16 B; ;
  (?
    (!= (c.getRange A 11 5) %11011)
    (c.convertCS8 A)
    (?
      (c.getBit A 10)
      (c.convertCS8 (+ (' (: B 10) (: A 10)) $00010000))
      (c.empty)
    )
  );
  (?
    (== (c.getRange A 10 6) %110110)
    A
    0
  )
}
{c.convertSbS8 A; ; (c.convertSbS8.loop A 0)}

[String with null]
{c.concatenateS8N A; ;
  (? (: A 8) (' A (: 0 8)) A)
}
{c.concatenateSxN A; ;
  (? (: A 16) (' A (: 0 16)) A)
}

[Utf-16 change endian]
{c.changeEndianSx A 16; ;
  (' (c.getRange A 0 8) (c.getRange A 8 8))
}

[Utf16 convert newline to \r\n]
{c.regularizeNewLineSb A B; ;
  (c.regularizeNewLineSbL
    A
    B
    (' (: 0 1) (c.getLengthSx A))
  )
}
{c.regularizeNewLineSbL A 16 B C; ;
  (?
    (== A "\r")
    B
    (?
      (== A "\n")
      (? (> C 64) (c.empty) B)
      A
    )
  );
  ('
    (== A "\r")
    (- (: C 16) 1)
  )
}

[Repeat]
{c.repeat A B; ;
  (? B (' A (c.repeat A (- B 1))) (c.empty))
}

[Error]
{c.errorSb A; ; (~ (c.changeEndianSx A))}

[about vlrfsasm]
{c.versionNumber; ; $000200}
{c.versionString; ;
  ('
    (c.convertISb (c.getRange (c.versionNumber) 16 8))
    "."
    (c.convertISb (c.getRange (c.versionNumber) 8 8))
    "."
    (c.convertISb (c.getRange (c.versionNumber) 0 8))
  )
}
{c.name; ; (' "Vlrfsasm v" (c.versionString))}
