
{qcc.Split; ; (qc.const 1)}
{qcc.Number; ; (qc.const 2)}
{qcc.Symbol; ; (qc.const 3)}
{qcc.Round; ; (qc.const 4)}
{qcc.Curly; ; (qc.const 5)}
{qcc.Square; ; (qc.const 6)}
{qcc.String; ; (qc.const 7)}
{qcc.Escape; ; (qc.const 8)}
{qcc.NewLine; ; (qc.const 9)}
{qcc.Asterisk; ; (qc.const 10)}
{qcc.Slash; ; (qc.const 11)}
{qcc.Meta; ; (qc.const 12)}
{qcc.Period; ; (qc.const 13)}
{qcc.Hash; ; (qc.const 14)}
{qcc.Quotation; ; (qc.const 15)}

{qcc.list; ;
  ('
    (qc.list.element $09 (qcc.Split))
    (qc.list.element "\n" (qcc.NewLine))
    (qc.list.element "\r" (qcc.NewLine))
    (qc.list.element " " (qcc.Split))
    (qc.list.element "!" (qcc.Symbol))
    (qc.list.element "\"" (qcc.String))
    (qc.list.element "#" (qcc.Hash))
    (qc.list.element "$" (qcc.Symbol))
    (qc.list.element "%" (qcc.Symbol))
    (qc.list.element "&" (qcc.Symbol))
    (qc.list.element "%" (qcc.Symbol))
    (qc.list.element "'" (qcc.Quotation))
    (qc.list.element "(" (qcc.Round))
    (qc.list.element ")" (qcc.Round))
    (qc.list.element "*" (qcc.Asterisk))
    (qc.list.element "+" (qcc.Symbol))
    (qc.list.element "," (qcc.Round))
    (qc.list.element "-" (qcc.Symbol))
    (qc.list.element "." (qcc.Period))
    (qc.list.element "/" (qcc.Slash))
    (qc.list.element "0" (qcc.Number))
    (qc.list.element "1" (qcc.Number))
    (qc.list.element "2" (qcc.Number))
    (qc.list.element "3" (qcc.Number))
    (qc.list.element "4" (qcc.Number))
    (qc.list.element "5" (qcc.Number))
    (qc.list.element "6" (qcc.Number))
    (qc.list.element "7" (qcc.Number))
    (qc.list.element "8" (qcc.Number))
    (qc.list.element "9" (qcc.Number))
    (qc.list.element ":" (qcc.Symbol))
    (qc.list.element ";" (qcc.Curly))
    (qc.list.element "<" (qcc.Symbol))
    (qc.list.element "=" (qcc.Symbol))
    (qc.list.element ">" (qcc.Symbol))
    (qc.list.element "?" (qcc.Symbol))
    (qc.list.element "@" (qcc.Meta))
    (qc.list.element "[" (qcc.Square))
    (qc.list.element "\\" (qcc.Escape))
    (qc.list.element "]" (qcc.Square))
    (qc.list.element "^" (qcc.Symbol))
    (qc.list.element "{" (qcc.Curly))
    (qc.list.element "|" (qcc.Symbol))
    (qc.list.element "}" (qcc.Curly))
    (qc.list.element "~" (qcc.Symbol))
  )
}

{qtc.Name; ; (qt.const 1)}
{qtc.Split; ; (qt.const 2)}
{qtc.Number; ; (qt.const 3)}
{qtc.Symbol; ; (qt.const 4)}
{qtc.Round; ; (qt.const 5)}
{qtc.Curly; ; (qt.const 6)}
{qtc.Square; ; (qt.const 7)}
{qtc.String; ; (qt.const 8)}
{qtc.EscapedS; ; (qt.const 9)}
{qtc.Comment0; ; (qt.const 10)}
{qtc.CommentA1; ; (qt.const 11)}
{qtc.CommentA2; ; (qt.const 12)}
{qtc.CommentB1; ; (qt.const 13)}
{qtc.CommentB2; ; (qt.const 14)}
{qtc.CommentB3; ; (qt.const 15)}
{qtc.Period; ; (qt.const 16)}
{qtc.Preprocess; ; (qt.const 17)}
{qtc.Character; ; (qt.const 18)}
{qtc.EscapedC; ; (qt.const 19)}
{qtc.Reserved; ; (qt.const 20)}
{qtc.Meta1; ; (qt.const 254)}

{qrc.list; ;
  ('
    (qr.begin (qc.Default) (qtc.Name))
    (qr.begin (qcc.Split) (qtc.Split))
    (qr.begin (qcc.Number) (qtc.Number))
    (qr.begin (qcc.Symbol) (qtc.Symbol))
    (qr.begin (qcc.Round) (qtc.Round))
    (qr.begin (qcc.Curly) (qtc.Curly))
    (qr.begin (qcc.Square) (qtc.Square))
    (qr.begin (qcc.String) (qtc.String))
    (qr.begin (qcc.NewLine) (qtc.Split))
    (qr.begin (qcc.Asterisk) (qtc.Symbol))
    (qr.begin (qcc.Slash) (qtc.Comment0))
    (qr.begin (qcc.Meta) (qtc.Symbol))
    (qr.begin (qcc.Period) (qtc.Period))
    (qr.begin (qcc.Hash) (qtc.Preprocess))
    (qr.begin (qcc.Quotation) (qtc.Character))
    (qr.add (qtc.Name) (qc.Default))
    (qr.add (qtc.Name) (qcc.Number))
    (qr.change (qtc.Name) (qcc.String) (qtc.String))
    (qr.add (qtc.Split) (qcc.Split))
    (qr.add (qtc.Split) (qcc.NewLine))
    (qr.add (qtc.Number) (qc.Default))
    (qr.add (qtc.Number) (qcc.Number))
    (qr.add (qtc.Number) (qcc.Period))
    (qr.add (qtc.Symbol) (qcc.Symbol))
    (qr.add (qtc.Symbol) (qcc.Asterisk))
    (qr.add (qtc.Round) (qcc.Round))
    (qr.add (qtc.Curly) (qcc.Curly))
    (qr.add (qtc.Square) (qcc.Square))
    (qr.add (qtc.String) (qc.Default))
    (qr.add (qtc.String) (qcc.Split))
    (qr.add (qtc.String) (qcc.Number))
    (qr.add (qtc.String) (qcc.Symbol))
    (qr.add (qtc.String) (qcc.Round))
    (qr.add (qtc.String) (qcc.Curly))
    (qr.add (qtc.String) (qcc.Square))
    (qr.end (qtc.String) (qcc.String))
    (qr.change (qtc.String) (qcc.Escape) (qtc.EscapedS))
    (qr.add (qtc.String) (qcc.NewLine))
    (qr.add (qtc.String) (qcc.Asterisk))
    (qr.add (qtc.String) (qcc.Slash))
    (qr.add (qtc.String) (qcc.Meta))
    (qr.add (qtc.String) (qcc.Period))
    (qr.add (qtc.String) (qcc.Hash))
    (qr.add (qtc.String) (qcc.Quotation))
    (qr.change (qtc.EscapedS) (qc.Default) (qtc.String))
    (qr.change (qtc.EscapedS) (qcc.Number) (qtc.String))
    (qr.change (qtc.EscapedS) (qcc.Escape) (qtc.String))
    (qr.change (qtc.Comment0) (qcc.Symbol) (qtc.Symbol))
    (qr.change (qtc.Comment0) (qcc.Asterisk) (qtc.CommentB1))
    (qr.change (qtc.Comment0) (qcc.Slash) (qtc.CommentA1))
    (qr.change (qtc.CommentA1) (qc.Default) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Split) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Number) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Symbol) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Round) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Curly) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Square) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.String) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Escape) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Asterisk) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Slash) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Meta) (qt.Meta))
    (qr.change (qtc.CommentA1) (qcc.Period) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Hash) (qtc.CommentA2))
    (qr.change (qtc.CommentA1) (qcc.Quotation) (qtc.CommentA2))
    (qr.add (qtc.CommentA2) (qc.Default))
    (qr.add (qtc.CommentA2) (qcc.Split))
    (qr.add (qtc.CommentA2) (qcc.Number))
    (qr.add (qtc.CommentA2) (qcc.Symbol))
    (qr.add (qtc.CommentA2) (qcc.Round))
    (qr.add (qtc.CommentA2) (qcc.Curly))
    (qr.add (qtc.CommentA2) (qcc.Square))
    (qr.add (qtc.CommentA2) (qcc.String))
    (qr.add (qtc.CommentA2) (qcc.Escape))
    (qr.add (qtc.CommentA2) (qcc.Asterisk))
    (qr.add (qtc.CommentA2) (qcc.Slash))
    (qr.add (qtc.CommentA2) (qcc.Meta))
    (qr.add (qtc.CommentA2) (qcc.Hash))
    (qr.add (qtc.CommentA2) (qcc.Period))
    (qr.add (qtc.CommentA2) (qcc.Quotation))
    (qr.change (qtc.CommentB1) (qc.Default) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Split) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Number) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Symbol) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Round) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Curly) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Square) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.String) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Escape) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.NewLine) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Asterisk) (qtc.CommentB3))
    (qr.change (qtc.CommentB1) (qcc.Slash) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Meta) (qt.Meta))
    (qr.change (qtc.CommentB1) (qcc.Period) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Hash) (qtc.CommentB2))
    (qr.change (qtc.CommentB1) (qcc.Quotation) (qtc.CommentB2))
    (qr.add (qtc.CommentB2) (qc.Default))
    (qr.add (qtc.CommentB2) (qcc.Split))
    (qr.add (qtc.CommentB2) (qcc.Number))
    (qr.add (qtc.CommentB2) (qcc.Symbol))
    (qr.add (qtc.CommentB2) (qcc.Round))
    (qr.add (qtc.CommentB2) (qcc.Curly))
    (qr.add (qtc.CommentB2) (qcc.Square))
    (qr.add (qtc.CommentB2) (qcc.String))
    (qr.add (qtc.CommentB2) (qcc.Escape))
    (qr.add (qtc.CommentB2) (qcc.NewLine))
    (qr.change (qtc.CommentB2) (qcc.Asterisk) (qtc.CommentB3))
    (qr.add (qtc.CommentB2) (qcc.Slash))
    (qr.add (qtc.CommentB2) (qcc.Meta))
    (qr.add (qtc.CommentB2) (qcc.Hash))
    (qr.add (qtc.CommentB2) (qcc.Period))
    (qr.add (qtc.CommentB2) (qcc.Quotation))
    (qr.change (qtc.CommentB3) (qc.Default) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Split) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Number) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Symbol) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Round) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Curly) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Square) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.String) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Escape) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.NewLine) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Asterisk) (qtc.CommentB3))
    (qr.end (qtc.CommentB3) (qcc.Slash))
    (qr.change (qtc.CommentB3) (qcc.Meta) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Period) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Hash) (qtc.CommentB2))
    (qr.change (qtc.CommentB3) (qcc.Quotation) (qtc.CommentB2))
    (qr.add (qtc.Preprocess) (qc.Default))
    (qr.add (qtc.Preprocess) (qcc.Number))
    (qr.add (qtc.Character) (qc.Default))
    (qr.add (qtc.Character) (qcc.Split))
    (qr.add (qtc.Character) (qcc.Number))
    (qr.add (qtc.Character) (qcc.Symbol))
    (qr.add (qtc.Character) (qcc.Round))
    (qr.add (qtc.Character) (qcc.Curly))
    (qr.add (qtc.Character) (qcc.Square))
    (qr.add (qtc.Character) (qcc.String))
    (qr.change (qtc.Character) (qcc.Escape) (qtc.EscapedC))
    (qr.add (qtc.Character) (qcc.NewLine))
    (qr.add (qtc.Character) (qcc.Asterisk))
    (qr.add (qtc.Character) (qcc.Slash))
    (qr.add (qtc.Character) (qcc.Meta))
    (qr.add (qtc.Character) (qcc.Hash))
    (qr.add (qtc.Character) (qcc.Period))
    (qr.end (qtc.Character) (qcc.Quotation))
    (qr.change (qtc.EscapedC) (qc.Default) (qtc.Character))
    (qr.change (qtc.EscapedC) (qcc.Escape) (qtc.Character))
    (qr.change (qtc.EscapedC) (qcc.Quotation) (qtc.Character))
    (qr.add (qt.Meta) (qc.Default))
    (qr.add (qt.Meta) (qcc.Split))
    (qr.add (qt.Meta) (qcc.Number))
    (qr.add (qt.Meta) (qcc.Symbol))
    (qr.add (qt.Meta) (qcc.Round))
    (qr.add (qt.Meta) (qcc.Curly))
    (qr.add (qt.Meta) (qcc.Square))
    (qr.add (qt.Meta) (qcc.String))
    (qr.add (qt.Meta) (qcc.Escape))
    (qr.change (qt.Meta) (qcc.Asterisk) (qtc.Meta1))
    (qr.add (qt.Meta) (qcc.Slash))
    (qr.add (qt.Meta) (qcc.Meta))
    (qr.add (qt.Meta) (qcc.Hash))
    (qr.add (qt.Meta) (qcc.Period))
    (qr.add (qt.Meta) (qcc.Quotation))
    (qr.change (qtc.Meta1) (qc.Default) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Split) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Number) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Symbol) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Round) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Curly) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Square) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.String) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Escape) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Asterisk) (qtc.Meta1))
    (qr.end (qtc.Meta1) (qcc.Slash))
    (qr.change (qtc.Meta1) (qcc.Meta) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Period) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Hash) (qt.Meta))
    (qr.change (qtc.Meta1) (qcc.Quotation) (qt.Meta))
  )
}

{qmc.getString A B; ;
  (c.splitSx
    (?
      (== "*/" A)
      (c.getRangeSx A 3 (- (c.getLengthSx A) 5))
      (c.getRangeSx A 3 (- (c.getLengthSx A) 3))
    )
    ";"
    B
  )
}
{qmc.comment A; ; (' "/*" A "*/")}

{qsc.list; ;
  ('
    (qs.list.element (qtc.Name) "qCNa")
    (qs.list.element (qtc.Split) "qCSp")
    (qs.list.element (qtc.Number) "qCNu")
    (qs.list.element (qtc.Symbol) "qCSy")
    (qs.list.element (qtc.Round) "qCRo")
    (qs.list.element (qtc.Curly) "qCCu")
    (qs.list.element (qtc.Square) "qCSq")
    (qs.list.element (qtc.String) "qCSt")
    (qs.list.element (qtc.Comment0) "qCSy")
    (qs.list.element (qtc.CommentA1) "qCCo")
    (qs.list.element (qtc.CommentA2) "qCCo")
    (qs.list.element (qtc.CommentB3) "qCCo")
    (qs.list.element (qtc.Period) "qCPe")
    (qs.list.element (qtc.Preprocess) "qCPr")
    (qs.list.element (qtc.Character) "qCCh")
    (qs.list.element (qtc.Reserved) "qCRe")
  )
}

{qbc.list; ; (qb.defaultList)}

{qwc.list; ;
  ('
    (qw.list.element "alignas" (qtc.Name) (qtc.Reserved))
    (qw.list.element "alignof" (qtc.Name) (qtc.Reserved))
    (qw.list.element "and" (qtc.Name) (qtc.Reserved))
    (qw.list.element "and_eq" (qtc.Name) (qtc.Reserved))
    (qw.list.element "asm" (qtc.Name) (qtc.Reserved))
    (qw.list.element "auto" (qtc.Name) (qtc.Reserved))
    (qw.list.element "bitand" (qtc.Name) (qtc.Reserved))
    (qw.list.element "bitor" (qtc.Name) (qtc.Reserved))
    (qw.list.element "bool" (qtc.Name) (qtc.Reserved))
    (qw.list.element "break" (qtc.Name) (qtc.Reserved))
    (qw.list.element "case" (qtc.Name) (qtc.Reserved))
    (qw.list.element "catch" (qtc.Name) (qtc.Reserved))
    (qw.list.element "char" (qtc.Name) (qtc.Reserved))
    (qw.list.element "char8_t" (qtc.Name) (qtc.Reserved))
    (qw.list.element "char16_t" (qtc.Name) (qtc.Reserved))
    (qw.list.element "char32_t" (qtc.Name) (qtc.Reserved))
    (qw.list.element "class" (qtc.Name) (qtc.Reserved))
    (qw.list.element "compl" (qtc.Name) (qtc.Reserved))
    (qw.list.element "concept" (qtc.Name) (qtc.Reserved))
    (qw.list.element "const" (qtc.Name) (qtc.Reserved))
    (qw.list.element "consteval" (qtc.Name) (qtc.Reserved))
    (qw.list.element "constexpr" (qtc.Name) (qtc.Reserved))
    (qw.list.element "constinit" (qtc.Name) (qtc.Reserved))
    (qw.list.element "continue" (qtc.Name) (qtc.Reserved))
    (qw.list.element "co_await" (qtc.Name) (qtc.Reserved))
    (qw.list.element "co_return" (qtc.Name) (qtc.Reserved))
    (qw.list.element "co_yield" (qtc.Name) (qtc.Reserved))
    (qw.list.element "decltype" (qtc.Name) (qtc.Reserved))
    (qw.list.element "default" (qtc.Name) (qtc.Reserved))
    (qw.list.element "delete" (qtc.Name) (qtc.Reserved))
    (qw.list.element "do" (qtc.Name) (qtc.Reserved))
    (qw.list.element "double" (qtc.Name) (qtc.Reserved))
    (qw.list.element "dynamic_cast" (qtc.Name) (qtc.Reserved))
    (qw.list.element "else" (qtc.Name) (qtc.Reserved))
    (qw.list.element "enum" (qtc.Name) (qtc.Reserved))
    (qw.list.element "explicit" (qtc.Name) (qtc.Reserved))
    (qw.list.element "export" (qtc.Name) (qtc.Reserved))
    (qw.list.element "extern" (qtc.Name) (qtc.Reserved))
    (qw.list.element "false" (qtc.Name) (qtc.Reserved))
    (qw.list.element "float" (qtc.Name) (qtc.Reserved))
    (qw.list.element "for" (qtc.Name) (qtc.Reserved))
    (qw.list.element "friend" (qtc.Name) (qtc.Reserved))
    (qw.list.element "goto" (qtc.Name) (qtc.Reserved))
    (qw.list.element "if" (qtc.Name) (qtc.Reserved))
    (qw.list.element "inline" (qtc.Name) (qtc.Reserved))
    (qw.list.element "int" (qtc.Name) (qtc.Reserved))
    (qw.list.element "long" (qtc.Name) (qtc.Reserved))
    (qw.list.element "mutable" (qtc.Name) (qtc.Reserved))
    (qw.list.element "namespace" (qtc.Name) (qtc.Reserved))
    (qw.list.element "new" (qtc.Name) (qtc.Reserved))
    (qw.list.element "noexcept" (qtc.Name) (qtc.Reserved))
    (qw.list.element "not" (qtc.Name) (qtc.Reserved))
    (qw.list.element "not_eq" (qtc.Name) (qtc.Reserved))
    (qw.list.element "nullptr" (qtc.Name) (qtc.Reserved))
    (qw.list.element "operator" (qtc.Name) (qtc.Reserved))
    (qw.list.element "or" (qtc.Name) (qtc.Reserved))
    (qw.list.element "or_eq" (qtc.Name) (qtc.Reserved))
    (qw.list.element "private" (qtc.Name) (qtc.Reserved))
    (qw.list.element "protected" (qtc.Name) (qtc.Reserved))
    (qw.list.element "public" (qtc.Name) (qtc.Reserved))
    (qw.list.element "register" (qtc.Name) (qtc.Reserved))
    (qw.list.element "reinterpret_cast" (qtc.Name) (qtc.Reserved))
    (qw.list.element "requires" (qtc.Name) (qtc.Reserved))
    (qw.list.element "return" (qtc.Name) (qtc.Reserved))
    (qw.list.element "short" (qtc.Name) (qtc.Reserved))
    (qw.list.element "signed" (qtc.Name) (qtc.Reserved))
    (qw.list.element "sizeof" (qtc.Name) (qtc.Reserved))
    (qw.list.element "static" (qtc.Name) (qtc.Reserved))
    (qw.list.element "static_assert" (qtc.Name) (qtc.Reserved))
    (qw.list.element "static_cast" (qtc.Name) (qtc.Reserved))
    (qw.list.element "struct" (qtc.Name) (qtc.Reserved))
    (qw.list.element "switch" (qtc.Name) (qtc.Reserved))
    (qw.list.element "template" (qtc.Name) (qtc.Reserved))
    (qw.list.element "this" (qtc.Name) (qtc.Reserved))
    (qw.list.element "thread_local" (qtc.Name) (qtc.Reserved))
    (qw.list.element "throw" (qtc.Name) (qtc.Reserved))
    (qw.list.element "true" (qtc.Name) (qtc.Reserved))
    (qw.list.element "try" (qtc.Name) (qtc.Reserved))
    (qw.list.element "typedef" (qtc.Name) (qtc.Reserved))
    (qw.list.element "typeid" (qtc.Name) (qtc.Reserved))
    (qw.list.element "typename" (qtc.Name) (qtc.Reserved))
    (qw.list.element "union" (qtc.Name) (qtc.Reserved))
    (qw.list.element "unsigned" (qtc.Name) (qtc.Reserved))
    (qw.list.element "using" (qtc.Name) (qtc.Reserved))
    (qw.list.element "virtual" (qtc.Name) (qtc.Reserved))
    (qw.list.element "void" (qtc.Name) (qtc.Reserved))
    (qw.list.element "volatile" (qtc.Name) (qtc.Reserved))
    (qw.list.element "wchar_t" (qtc.Name) (qtc.Reserved))
    (qw.list.element "while" (qtc.Name) (qtc.Reserved))
    (qw.list.element "xor" (qtc.Name) (qtc.Reserved))
    (qw.list.element "xor_eq" (qtc.Name) (qtc.Reserved))
  )
}
