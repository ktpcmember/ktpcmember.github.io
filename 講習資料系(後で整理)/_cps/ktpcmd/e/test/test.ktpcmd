<meta>
title += "ポインタと参照 - C++ on MSVC講習"
keywords += ", C++, MSVC"
description = "cv修飾子、ポインタと参照について解説しています。"
</meta>

<header>
name = "C++ on MSVC講習"
top = "le\_cps\_cps.html"
index = "le\_cps\m\i_dx\i_dx.html"
before = "le\_cps\ktpcmd\m\func\func.html"
next = ""
</header>

<main>
# C++ on MSVC講習/ポインタと参照

## あらすじと概要
前回は、関数を使うことで、コード片に意味を持たせられるようになりました。今回は、C言語最難関とされるポインタと、それを分かりやすく拡張した参照を解説します。ポインタは概念として、参照は単純に使うことが多く、どちらも非常に大切な機能です。

*- 重要語
- {} {}

## cv修飾子
cv修飾子は、[const](こんすと)と[volatile](ぼらたいる)修飾子のことです。何のことか分からないと思うので、サンプルコードを示します。

```cpp cv修飾子
#include <iostream>

int main()
{
	const int n = 0;
	volatile int m;
	const volatile int o = 3;

	m = 0; // ok, volatile修飾により、この代入は最適化でも削除されない
	m = 1; // ok, 上記同様

	// n = 1; // ng, const変数に再代入することは出来ない！

	std::cout
		<< "n : " << n
		<< "m : " << m
		<< "o : " << o;

}

void void_f()
{
	const int n = 0; // ok 
	int m = n;       // ok, ただ単に値をコピーしているだけ
	m = 10;          // ok, 変数mは普通のintの整数なので書き換えられる
}

// この4つ、全部同じ関数の宣言。オーバーロードもしてない。
// 引数のポインタでも参照でも無い型へのcv修飾は全て完全に無視される
int f(int);
int f(const int);
int f(volatile int);
int f(const volatile int);

int f(const int a)
{
	//++a; // ng, const指定されているので、値は変更できない。ポインタでも参照でもない仮引数のconstは、
           //     オーバーロードには関係しないが、仮引数を関数の本体で使うときにはcv修飾子が適用されている
	return a;
}

int g() { return 0; }
//const int g() { return 0; } // ng, ポインタでも参照でもない返り型のcv修飾は
                              //     仮引数の場合と違い、返り型だけが違う別の関数と認識される。
                              //     しかし、返り型だけが違う関数はオーバーロード出来ないのでエラー
                              //     ただし、呼び出し元で返り値を使用する時にはcv修飾は無視される

```

修飾子はいくつかの文脈で指定することが出来ますが、今回は変数について説明します。この資料の後の方で今回の文法をまとめますが、修飾子は`型名`の場所に付けられます。この時、型名や他の修飾子との順番は順不同なので、サンプルコードは一例です。
そして、修飾子を付けた変数は、その修飾子が意味する特性を持つようになります。

修飾子は、型名との順番が順不同であるため、いくつかの流派が存在しています。
サンプルコードでは`const int`などですが、`int const`などとする流派もあります。これは宗教のようなものなので、好きな書き方で書きましょう。

const修飾子は、指定した変数の値を変更できるのが初期化の時のみであることを指定します。つまり、const指定した変数は初期化ではない、代入等によって値を変更できなくなります。const指定することで、定数であることを示し、誤って値を変更することを防いだり、値を変更しないことをを明示し、コードの意味が分かりやすくなったりするので大切です。

volatile修飾子は、指定した変数のメモリアクセスに対して以下の2点を指定します。
olatile指定した変数への1度のメモリアクセスは、正確に1度として実行される、また、volatile指定した変数同士のメモリアクセスはコード上と対応すること。主に、ハードウェアなどのプログラム外部環境との通信するための変数に指定します。正直、volatile修飾子は通常のプログラミングでは使用しないので、覚えなくてもいいです。

volatile指定された変数に対する多くの操作は、C++17からは非推奨です。これは、単純な操作でない限り、メモリアクセス回数が分かりづらいからです。ただし、volatile修飾子自体が非推奨になったわけでは無いので注意しましょう。詳しくは、[ほとんどの`volatile`を非推奨化 - cpprefjp C++日本語リファレンス].{https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html}を参照です。

普通はしませんが、cv修飾子はconst_cast演算子で付け外しをすることが出来ます。static_cast同様に、`<>`に型名、`()`の中にキャストしたい値を入れます。ただし、型名の所には、この後解説する参照やポインタを用いた型でないといけません。

```syntax const_cast
`const_cast` `<` 型名 `>` `(` 値 `)`
```

当然、cv修飾子は、適用した変数等を介した操作に対してのみに効果を発揮します。そのため、cv修飾子は、関係がない変数間では互いに影響し合わ事はありません。例えばcv修飾がある変数`a`からcv修飾が無い変数`b`へコピーした時、その`a`と`b`の間に関係は無いため、`a`のcv修飾子が`b`に影響を及ぼすことは全くありません。ただし、ポインタや参照の場合は参照先の変数と関係を持つので、こうではありません。

関数の仮引数や返り値も、関係ない変数間ではcv修飾子は互いに影響しないことに従います。そのため、関数の仮引数の場合なら、コピー渡しの場合の時には、cv修飾子は無視されます。従って、コピー渡しの引数のcv修飾子だけが違う関数は、全く同一の関数として扱われます。ただし、もちろん仮引数を関数の本体で使用する時はcv修飾子の効果をが発揮されます。

返り値の場合、コピー渡しのような型だと、呼び出し元ではcv修飾子は無視されます。しかし、関数としてはcv修飾子は無視されず、`返り型`が違うものだとして扱われます。すなわち、この時に引数リストが同じだと、`返り型`だけ違う関数はオーバーロード出来ない
という規則に引っかかってしまい、エラーにされてしまうことに注意しましょう。

変数`n`は、const修飾しているので初期化以外では値を変更できません。ただし、値を変更しない動作である読み取りは出来るので、出力が出来ます。

変数`m`は、volatile修飾しているので、メモリアクセスがコードと正確に一致します。ここで、`m = 0;`は、出力等で使われておらず、直後に`m = 1;`していて要らない文です。C++では、この類の無駄は最適化で削除することが出来るので、最適化すると削除されます。しかし、volatile修飾しているため、`m = 0;`は必ず残り、コードの通りにアクセスされます。（そもそも定数なので、volatile修飾子が無ければ定数として埋め込まれるんですけどね。）

変数`o`は、const修飾とvolatile修飾しているので、どちらの特性も持ち合わせます。初期化以外で値は変更できないうえ、メモリアクセスはコードの通りに行われます。ただ、そもそもvolatile修飾子を普通のプログラミングでは見かけないので、
今後も出てくることはほとんどないでしょう…

定義の前に`f`の宣言が4つ並んでいるのですが、これは全て同じ型だと解釈されます。それは、ポインタでも参照でもない型のcv修飾子が仮引数の場合には、無視されるからでした。関数の定義でも、やはり同様の動作になりますが、仮引数を関数の定義で使用する場合には、ポインタでも参照でもない型でもcv修飾子の効果が発揮されるので、注意しましょう。ですから、`f`の定義を`const int a`なのを`int a`に変えたら、`++a`出来るようになります。

`g`は、返り値の型がポインタでも参照でもなく、cv修飾子が違う場合についてです。このような時は、関数の`返り型`としては、違う型だと認識されるのでした。今回は、どちらも引数を取っていないので、全く同じ引数リストになっています。ということで、オーバーロードすることは出来ないので、どちらかを消さないとエラーです。

それでは本題の導入として、基本的な参照の使い方について解説します。つまり、[ライブラリアン](ライブラリを作る人)にならない分には、この節を理解すれば参照を使えます。参照がどの様な意味論で構成されているかは、後の節で値カテゴリの詳細な解説と共にします。

```cpp ざっくり参照
#include <iostream>
#include <string>
#include <chrono>

int &assign_zero(int &num)
{
	num = 0;
	return num;
}
int &dangerous()
{
	int n = 0;
	return n;
}
void section1()
{
	std::cout << "section1\n";
	int n = 1;
	std::cout << n << "\n";
	assign_zero(n);
	std::cout << n << "\n";
	assign_zero(n) = 5;
	std::cout << n << "\n";

	// 危ない！！
	dangerous();

	std::cout << "\n";
}

void copy(std::string str) {}
void ref(std::string &str) {}
void section2()
{
	std::cout << "section2\n";

	// ながーい文字列
	std::string s(1ull << 30, '1');

	// 実引数をコピーして仮引数を初期化
	auto start = std::chrono::system_clock::now();
	copy(s);
	auto end = std::chrono::system_clock::now();
	std::cout << "copy : " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms\n";

	// 実引数を参照することで、実引数をコピーしない
	start = std::chrono::system_clock::now();
	ref(s);
	end = std::chrono::system_clock::now();
	std::cout << "ref  : " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms\n";

	std::cout << "\n";
}

int ret_zero() { return 0; }
int &ret_as_get(int &n) { return n; }
void lvalue_reference(int &) {}
void const_lvalue_reference(const int &) {}
void rvalue_reference(int &&) {}
void section3()
{
	std::cout << "section3\n";

	int n;          // lvlaue
	"string";       // lvalue
	ret_as_get(n);  // 返り型がlvalue referenceなので、呼び出し結果はlvalue
	0;              // rvalue
	ret_zero();     // 返り型がnon referenceなので、呼び出し結果はrvalue

	lvalue_reference(n);
	// lvalue_reference(0);    // ng, lvalue referenceにはlvalueしか束縛できない

	const_lvalue_reference(n);
	const_lvalue_reference(0); // ok, const lvalue referenceは何でも束縛できる

	// rvalue_reference(n);    // ng, rvalue referenceにはrvalueしか束縛できない
	rvalue_reference(0);

	std::cout << "\n";
}

int main()
{
	section1();
	section2();
	section3();
}

```

```cmd 実行結果例
section1
1
0
5

section2
copy : 457ms
ref  : 0ms

section3


```

## 解説
参照は変数や関数などのエイリアス、すなわち別名を宣言することが出来る機能です。
つまり、ある変数や関数を、「参照で宣言した識別子」でもアクセスできるようになります。
参照先を決定するのは初期化の際で、参照先を参照に紐づけることを束縛すると言います。

C++での全ての式は文法上カテゴリを持ち、それを値カテゴリと言います。
通常気に掛ける必要がある値カテゴリは、[lvalue](えるばりゅー)と[rvalue](あーるばりゅー)の2つです。
その2つはほとんどの場合、識別子を持つ/持たないで、lvalue/rvalueと区別できます。

lvalueとrvalueは、先述の通り概ね識別子を持っているかで区別することが出来ます。
lvalueは識別子を持つような式なので、識別子が持つスコープなどがライフタイムです。
一方、rvalueは識別子を持たない式なので、ライフタイムはその式が含まれる文のみです。
例外はlvalueかつプログラムの初めから終わりがライフタイムの文字列リテラルなどです。


参照は、lvalue [reference](りふぁれんす)とrvalue referenceの2つに分けられます。
詳しい構文はページの最後に示しますが、前者は`&`、後者は`&&`を識別子直前に書きます。
2者は、名前の通り、束縛できるのがlvalue/rvalueだけであるという違いがあります。
しかし、constを付けたlvalue referenceに限っては、rvalueも束縛できる特徴があります。

参照は必ず初期化しなくてはならず、その際にオブジェクトを束縛します。
そして、その後は新たに束縛は出来ず、初期化時に束縛したオブジェクトを参照し続けます。
このために、参照は必ず何かしらのオブジェクトを参照することが保証されます。

直前で、「参照は必ず何かしらのオブジェクトを参照することが保証されます」と書きました。
しかし、参照は「もうライフタイムが終了したオブジェクトを参照する」ことがあるのです。
そのような不正な状態の参照を、ダングリング参照やぶら下がり参照と呼びます。
既に破棄された領域にアクセスしてはいけないので、ダングリング参照も作ってはいけません。

参照は初期化時にオブジェクトを束縛し、その後は新たに束縛することは出来ません。
そのため、参照に対する操作は、正確に束縛しているオブジェクトへの操作になります。
lvalueを束縛できるlvalue referenceの場合、識別子を持つオブジェクトを束縛するため、
例えば、`int a, &r = a;`とある時に、`r = 0;`とすると正確に`a = 0;`と同じになります。

さて、lvalueを束縛する参照は、束縛しているオブジェクトに置き換えて考えられました。
次にrvalueを束縛できるrvlaue referneceやconst rvalue referenceを考えましょう。
実は、それらの参照がrvalueを束縛すると、束縛されたrvalueはその参照のライフタイムと
同等の長さのライフタイムを持つようになるため、ダングリング参照にはならないのです。
つまり、それらの参照はrvlaueたる一時オブジェクトのライフタイムを延長するのです。



## 参照
...


```cpp 参照
#include <iostream>

/* section 1 ***********************************************************************************************/
int rvalue() { return 0; }
const int rvalue_() { return 0; }
const int &&crvalue() { return 0; }
void section1()
{
	int lvalue = 0;         // lvalue       （変数はlvalue）
	const int clvalue = 0;  // const lvalue （const付き）
	int rvalue();           // rvalue       （返り値が参照でない関数の返り値はrvalue）
	const int rvalue_();   // rvalue        (const rvalueかと思いきや、ただのrvalue。つまり返り値intと同じ）
	const int &&crvalue();  // const rvalue  (これはrvalue referenceへのconstなので、const rvalue)

	int value0 = lvalue;              // ok
	int value1 = clvalue;             // ok
	int value2 = rvalue();            // ok
	int value3 = rvalue_();          // ok
	int value4 = crvalue();           // ok

	int &l_ref0 = lvalue;             // ok
	//int &l_ref1 = clvalue;          // ng, 1.(cv指定子が消える方へは束縛できない)
	//int &l_ref2 = rvalue();         // ng, 2.(lvalue referenceにrvalueは束縛できない)
	//int &l_ref3 = rvalue_();        // ng, 2.
	//int &l_ref4 = crvalue();        // ng, 1. + 2.

	const int &cl_ref0 = lvalue;      // ok
	const int &cl_ref1 = clvalue;     // ok
	const int &cl_ref2 = rvalue();    // ok
	const int &cl_ref3 = rvalue_();   // ok
	const int &cl_ref4 = crvalue();   // ok

	//int &&r_ref0 = lvalue;          // ng, 1.(rvalue referenceにlvalueは束縛できない)
	//int &&r_ref1 = clvalue;         // ng, 1. + 2.(cv指定子が消える方へは束縛できない)
	int &&r_ref2 = rvalue();          // ok
	int &&r_ref3 = rvalue_();         // ok
	//int &&r_ref4 = crvalue();       // ng, 2.

	//const int &&cr_ref0 = lvalue;   // ng, 1.(const rvalue referenceにlvalueは束縛できない)
	//const int &&cr_ref1 = clvalue;  // ng, 1.
	const int &&cr_ref2 = rvalue();   // ok
	const int &&cr_ref3 = rvalue_();  // ok
	const int &&cr_ref4 = crvalue();  // ok
}
/**********************************************************************************************************/


/* section 2 **********************************************************************************************/
void show_n_lref(int n, int m)
{
	std::cout << "n    : " << n << "\tlref : " << m << "\n";
}

void show_rref(int n)
{
	std::cout << "rref : " << n << "\n";
}

void section2()
{
	int n = 1, &lref = n;

	show_n_lref(n, lref);

	n = 2;

	show_n_lref(n, lref);

	lref = 3;

	show_n_lref(n, lref);


	std::cout << "\n";


	int &&rref = 42;

	show_rref(rref);

	rref = 334;

	show_rref(rref);

	std::cout << "\n";
}
/**********************************************************************************************************/

int main()
{
	section1();
	section2();
}

```

```cmd 実行結果
n    : 1  lref : 1
n    : 2  lref : 2
n    : 3  lref : 3

rref : 42
rref : 334


```

## 参照解説
参照は変数や関数などのエイリアス、即ち別名を宣言できるようになる機能です。
参照は、必ず初期化をしなくてはならず、その時にその参照が参照する先を決定します。
そして、初期化時以外に参照の参照先を決定・変更することは一切出来ません。
なお、この初期化時に行う、参照に変数や値などを紐づけることを束縛すると言います。

参照は変数や関数などを束縛し、一度束縛した参照への操作は、参照先への操作になります。
そんな参照ですが、ざっくりlvalue referenceとrvalue referenceの2つに分けられます。
構文については後から示しますが、前者は`&`、後者は`&&`を`識別子`直前に書きます。
また、前者はC++98から、後者はC++11から存在しますが、理解するには式の分類が必要です。

[N4861に示されている、式の分類の表].{https://timsong-cpp.github.io/cppwp/n4861/basic.lval#fig:basic.lval}のように、式は文法上、カテゴリを持ちます。
「値」と私達が呼ぶものは、式として[lvalue](えるばりゅー)・[xvalue](えっくすばりゅー)・[pvalue](ぴーばりゅー)に大別されます。
また、lvalueとxvalueの一部が[glvalue](じーえるばりゅー)、xvalueの一部とpvalueが[rvalue](あーばりゅー)でもあります。

&()
<div class='figure' id='fig:basic.lval'><svg width="282pt" height="146pt"
 viewBox="0.00 0.00 281.50 146.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g class="graph" transform="scale(1 1) rotate(0) translate(4 142)">
<title>categories</title>
<!-- expression -->
<g class="node">
<title>expression</title>
<text text-anchor="middle" x="135" y="-123.6" font-family="Times,serif" font-size="13.00" fill="#000000">expression</text>
</g>
<!-- glvalue -->
<g class="node">
<title>glvalue</title>
<text text-anchor="middle" x="81" y="-65.6" font-family="Times,serif" font-size="13.00" fill="#000000">glvalue</text>
</g>
<!-- expression&#45;&gt;glvalue -->
<g class="edge">
<title>expression&#45;&gt;glvalue</title>
<path fill="none" stroke="#000000" d="M124.5883,-115.817C117.1178,-107.7932 106.8812,-96.7983 98.2054,-87.4799"/>
<polygon fill="#000000" stroke="#000000" points="100.7556,-85.0826 91.3798,-80.1487 95.6324,-89.8526 100.7556,-85.0826"/>
</g>
<!-- rvalue -->
<g class="node">
<title>rvalue</title>
<text text-anchor="middle" x="190" y="-65.6" font-family="Times,serif" font-size="13.00" fill="#000000">rvalue</text>
</g>
<!-- expression&#45;&gt;rvalue -->
<g class="edge">
<title>expression&#45;&gt;rvalue</title>
<path fill="none" stroke="#000000" d="M145.6046,-115.817C153.2133,-107.7932 163.6395,-96.7983 172.476,-87.4799"/>
<polygon fill="#000000" stroke="#000000" points="175.0867,-89.8132 179.428,-80.1487 170.0074,-84.9966 175.0867,-89.8132"/>
</g>
<!-- lvalue -->
<g class="node">
<title>lvalue</title>
<text text-anchor="middle" x="27" y="-7.6" font-family="Times,serif" font-size="13.00" fill="#000000">lvalue</text>
</g>
<!-- glvalue&#45;&gt;lvalue -->
<g class="edge">
<title>glvalue&#45;&gt;lvalue</title>
<path fill="none" stroke="#000000" d="M70.5883,-57.817C63.1178,-49.7932 52.8812,-38.7983 44.2054,-29.4799"/>
<polygon fill="#000000" stroke="#000000" points="46.7556,-27.0826 37.3798,-22.1487 41.6324,-31.8526 46.7556,-27.0826"/>
</g>
<!-- xvalue -->
<g class="node">
<title>xvalue</title>
<text text-anchor="middle" x="135" y="-7.6" font-family="Times,serif" font-size="13.00" fill="#000000">xvalue</text>
</g>
<!-- glvalue&#45;&gt;xvalue -->
<g class="edge">
<title>glvalue&#45;&gt;xvalue</title>
<path fill="none" stroke="#000000" d="M91.4117,-57.817C98.8822,-49.7932 109.1188,-38.7983 117.7946,-29.4799"/>
<polygon fill="#000000" stroke="#000000" points="120.3676,-31.8526 124.6202,-22.1487 115.2444,-27.0826 120.3676,-31.8526"/>
</g>
<!-- rvalue&#45;&gt;xvalue -->
<g class="edge">
<title>rvalue&#45;&gt;xvalue</title>
<path fill="none" stroke="#000000" d="M179.3954,-57.817C171.7867,-49.7932 161.3605,-38.7983 152.524,-29.4799"/>
<polygon fill="#000000" stroke="#000000" points="154.9926,-26.9966 145.572,-22.1487 149.9133,-31.8132 154.9926,-26.9966"/>
</g>
<!-- prvalue -->
<g class="node">
<title>prvalue</title>
<text text-anchor="middle" x="245" y="-7.6" font-family="Times,serif" font-size="13.00" fill="#000000">prvalue</text>
</g>
<!-- rvalue&#45;&gt;prvalue -->
<g class="edge">
<title>rvalue&#45;&gt;prvalue</title>
<path fill="none" stroke="#000000" d="M200.6046,-57.817C208.2133,-49.7932 218.6395,-38.7983 227.476,-29.4799"/>
<polygon fill="#000000" stroke="#000000" points="230.0867,-31.8132 234.428,-22.1487 225.0074,-26.9966 230.0867,-31.8132"/>
</g>
</g>
</svg>
<br>Figure <a href='#fig:basic.lval'>1</a>: Expression category taxonomy&emsp;&ensp;[fig:basic.lval]</div>
&;

その大切な2つのカテゴリはlvalue/rvalueで、これらは所謂「左辺値/右辺値」のことです。
歴史的には、代入式の左辺/右辺に現れることが出来る値の事を指し、それが由来です。
雑に説明すると、式の結果に識別子がある/ない式がlvalue/rvalueです（例外あり）。
少し難しくすると、lvalueがコード上で定義されているオブジェクトなどが結果の式、
rvalueはリテラルや、計算やキャスト等で発生した一時的なオブジェクトが結果の式です。

参照には2種類あると言いましたが、それぞれ束縛できる値カテゴリが違うのです。
まず、lvalue referenceは、その名の通りlvalueを束縛することが出来ます。
そして、rvalue referenceも、その名の通りrvalueを束縛することが出来ます。
ただし、const lavlue referenceだけはどちらも束縛することが出来るとされています。

rvalue、実例を見ていると分かりますが、文が終了するとライフタイムが終了します。
そこから考えると、rvalueはより次の文に持ち越せたりは出来ないように思えます。
しかし、const lvalue referenceやrvalue referenceなどの参照に束縛されると、
その束縛されたrvlaueは、それを束縛している参照のライフタイムと同じになるのです。
つまり、rvalueは参照に束縛されるとライフタイムが延長されるのです。

参照にcv修飾子を付けている場合、当然、その参照を通じた操作の時に反映されます。
const修飾子なら、指定した参照から、参照先の変数を変更できないようになるし、
volatile修飾子なら、指定した参照からのメモリアクセスがコードと対応します。

ポインタや参照でない型の変数同士では、値がコピーされるので、関係は薄いものでした。
しかし、参照の場合は、参照先への別名として振舞うため、参照先への強い関係があります。
この時、cv修飾子が減るような束縛が出来ると、非常にバグが起きやすい機能になります。
よって、参照は束縛先のcv修飾子と同等か、それ以上でないと束縛出来なくなっています。

*- まとめ
- {参照の種類} {束縛できる値カテゴリ（+ const修飾子）で、束縛できるもの}
- {lvalue reference} {lvalue}
- {const lvalue reference} {lvalue, const lvalue, rvalue, const rvlalue}
- {rvalue reference} {rvalue}
- {const rvalue reference} {rvalue, const rvalue}

### サンプルコードについて1 - `section1`
サンプルコードの関数`section1`では、ここまでで説明した事が示されています。
つまり、lvalue/rvalueと、lvalue reference/rvalue referenceについて、
束縛できる関係と、cv修飾子が外れるような束縛が出来ない事が示されています。

### 右辺値参照の参照先、変わってない…？ - `section2`
関数`section2`で、変数`rref`は初め`42`でしたが、その後`334`になるのは変だと思って
「`42`には代入出来ないのだから、参照先が変更されている？」となるかもしれません。
ですが、rvalue referenceは束縛する右辺値用に変数を用意するような働きをしているだけです。
例えば、「代入を禁止した型」のような型があった時、束縛するときは初期化なので問題なし、
しかしその後は、rvalue referenceが用意した変数への操作なので、代入出来なくなります。

### サンプルコードについて2 - `section2`
関数`section1`は規則の確認でしたが、関数`section2`では参照の効果の確認です。
変数`lref`は変数`n`を束縛しているので、`lref`への操作は`n`への操作になります。
変数`rref`については、先述した通りなので、割愛します。
忘れがちですが、lvalue/rvalue referenceのどちらも参照それ自体はlvalueです。
もちろん、束縛している値がlvalueだろうが、rvalueだろうが、参照それ自体はlvalueです。


## 値カテゴリ
参照の前に解説しないといけない内容は、修飾子だけでなく値カテゴリもあります。
値カテゴリの一部を理解することで、参照を[完全に理解](分かった気に)なれるようになります。

```cpp 値カテゴリ

```

## ポインタ
参照が関数等で実際に使われる場合を示す前に、参照の元のポインタについて解説します。
ポインタはC言語でも初学者を躓かせる機能とされていますが、構文が理解しづらいだけです。
C++のメモリモデルをしっかりと認識すればそれ程難しくはありません。

```cpp ポインタ

```

## 参照、出典
参照や出典です

*- 参照
- [dcl.pre] https://timsong-cpp.github.io/cppwp/n4861/dcl.pre
- [dcl.decl] https://timsong-cpp.github.io/cppwp/n4861/dcl.decl
- [dcl.ptr] https://timsong-cpp.github.io/cppwp/n4861/dcl.ptr
- [dcl.ref] https://timsong-cpp.github.io/cppwp/n4861/dcl.ref
- [basic.lval] https://timsong-cpp.github.io/cppwp/n4861/basic.lval
- [dcl.fct] https://timsong-cpp.github.io/cppwp/n4861/dcl.fct
- {cv (const および volatile) 型修飾子 - cppreference.com} https://ja.cppreference.com/w/cpp/language/cv
- {ほとんどの`volatile`を非推奨化 - cpprefjp C++日本語リファレンス} https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html
- {const_cast 変換 - cppreference.com} https://ja.cppreference.com/w/cpp/language/const_cast
- {値カテゴリ - cppreference.com} https://ja.cppreference.com/w/cpp/language/value_category
- {みんなlvalueとrvalueを難しく考えすぎちゃいないかい？ - Qiita} https://qiita.com/yumetodo/items/8eae5714a6cfe1c0407d
- {参照宣言 - cppreference.com} https://ja.cppreference.com/w/cpp/language/reference
- {参照初期化 - cppreference.com} https://ja.cppreference.com/w/cpp/language/reference_initialization

</main>